// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for restaurant staff
model User {
  id        String   @id @default(cuid())
  email     String
  name      String?
  role      UserRole @default(WAITER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@unique([restaurantId, email])
  @@map("users")
}

// Restaurant model
model Restaurant {
  id                  String    @id @default(cuid())
  email               String    @unique
  password            String?
  isGoogleRegistered  Boolean   @default(false)
  name                String?
  description         String?
  address             String?
  phone               String?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  users   User[]
  tables  Table[]
  menus   Menu[]
  orders  Order[]

  @@map("restaurants")
}

// Table model
model Table {
  id           String      @id @default(cuid())
  number       Int
  capacity     Int
  isAvailable  Boolean     @default(true)
  qrCode       String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@unique([restaurantId, number])
  @@map("tables")
}

// Menu model
model Menu {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items        MenuItem[]

  @@map("menus")
}

// Menu Item model
model MenuItem {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  category    String?
  isAvailable Boolean @default(true)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  menuId String
  menu   Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  orders OrderItem[]

  @@map("menu_items")
}

// Order model
model Order {
  id          String      @id @default(cuid())
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  tableId      String
  table        Table      @relation(fields: [tableId], references: [id])
  items        OrderItem[]

  @@map("orders")
}

// Order Item model
model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)

  // Relations
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

// Enums
enum UserRole {
  MANAGER
  WAITER
  CHEF
  CASHIER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
